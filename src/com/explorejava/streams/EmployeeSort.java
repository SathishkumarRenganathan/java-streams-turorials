package com.explorejava.streams;import com.explorejava.model.Employee;import java.util.ArrayList;import java.util.Comparator;import java.util.List;import java.util.stream.Collectors;public class EmployeeSort {    public static void main(String[] args) {        List<Employee> empList = new ArrayList<Employee>();        empList.add(new Employee( 10, "Raja", 36, 400000));        empList.add(new Employee( 20, "Rani", 34, 350000));        empList.add(new Employee( 30, "Manthiri", 25, 450000));        empList.add(new Employee( 40, "Police", 50, 500000));        empList.add(new Employee( 50, "Thirudan", 78, 100000));        //using comparator by using salary        List<Employee> sortedEmpList = empList.stream().sorted(new Comparator<Employee>() {            @Override            public int compare(Employee o1, Employee o2) {                return (int) (o1.getSalary() - o2.getSalary());            }        }).collect(Collectors.toList());        System.out.println(sortedEmpList);        System.out.println("***************");        //using lambda        List<Employee> sortedEmpList1 = empList.stream().sorted((o1, o2) -> Math.toIntExact(o1.getSalary() - o2.getSalary())).collect(Collectors.toList());        System.out.println(sortedEmpList1);        System.out.println("***************");        //using lambda        List<Employee> sortedEmpList2 = empList.stream().sorted(Comparator.comparingLong(Employee::getSalary)).collect(Collectors.toList());        System.out.println(sortedEmpList2);        System.out.println("***************");        //decending order using lambda        List<Employee> sortedEmpList3 = empList.stream().sorted((o1, o2) -> Math.toIntExact(o2.getSalary() - o1.getSalary())).collect(Collectors.toList());        System.out.println(sortedEmpList3);        System.out.println("***************");        //decending order using lambda        List<Employee> sortedEmpList4 = empList.stream().sorted(Comparator.comparingLong(Employee::getSalary).reversed()).collect(Collectors.toList());        System.out.println(sortedEmpList4);        System.out.println("***************");        //using comparator by using age        List<Employee> sortedEmpListByAge1 = empList.stream().sorted(Comparator.comparingInt(Employee::getAge)).collect(Collectors.toList());        System.out.println(sortedEmpListByAge1);        System.out.println("***************");        //using lambda by age        List<Employee> sortedEmpListByAge2 = empList.stream().sorted((o1, o2) -> o1.getAge() - o2.getAge()).collect(Collectors.toList());        System.out.println(sortedEmpListByAge2);        System.out.println("***************");        //sorting by using name        List<Employee> sortedEmpListByName1 = empList.stream().sorted(Comparator.comparing(Employee::getName)).collect(Collectors.toList());        System.out.println(sortedEmpListByName1);        System.out.println("***************");    }}